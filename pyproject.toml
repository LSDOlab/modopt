[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[project]
name = 'modopt'
description = 'A modular development environment and library for optimization algorithms.'
readme = 'README.md'
requires-python = '>=3.9'
# license = {file = 'LICENSE.txt'}
license = {text = 'LGPLv3+'}
authors = [
  {name = 'Anugrah Jo Joshy', email = 'ajoshy.ucsd@gmail.com'},
]
maintainers = [
  {name = 'Anugrah Jo Joshy', email = 'ajoshy.ucsd@gmail.com'},
]
keywords=[  
    'design optimization', 'optimization algorithm', 'optimizer library', 
    'optimization', 'optimizer', 'nonlinear programming', 'numerical optimization'
    ]
dynamic = ["version"]
dependencies = [
    'numpy>=1.24,<2',
    'scipy>=1.11,<2',
    'array_manager @ git+https://github.com/anugrahjo/array_manager.git@modopt',
    'h5py>=3.11.0,<4',
    "matplotlib>=3.4,<4",
]
classifiers=[
    'Development Status :: 5 - Production/Stable',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',
    'Operating System :: OS Independent',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Education',
    'Natural Language :: English',
    'Topic :: Education',
    'Topic :: Education :: Computer Aided Instruction (CAI)',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Topic :: Software Development',
    'Topic :: Software Development :: Libraries',
]

[project.urls]
"Homepage/Repository" = "https://github.com/LSDOlab/modopt"
Documentation = 'https://modopt.readthedocs.io/en/latest/'
"Bug Tracker" = "https://github.com/LSDOlab/modopt/issues"
Changelog = "https://modopt.readthedocs.io/en/latest/src/changelog.html"
# Download = "https://pypi.org/project/modopt-lib/#files"

[tool.setuptools.dynamic]
version = {attr = "modopt.__version__"}

[tool.setuptools]
package-dir = {"" = "."}

[project.optional-dependencies]
all = [
    "modopt[docs, test, interfaces, visualization]",
]
dev = [
    "modopt[docs, test]",
]
deploy = [
    "numpy==1.26.4",    # Fixed to the latest version that was compatible at the time of writing
    "scipy==1.13.1",    # Fixed to the latest version that was compatible at the time of writing
    'array_manager @ git+https://github.com/anugrahjo/array_manager.git@modopt',
    'h5py==3.11.0',     # Fixed to the latest version that was compatible at the time of writing
    "matplotlib==3.9.0",# Fixed to the latest version that was compatible at the time of writing
]
# Includes the list of all dependencies required to build the docs
docs = [
    "sphinx==5.3.0",
    "myst-nb==0.17.2",
    "sphinx_rtd_theme==1.1.1",
    "sphinx-copybutton==0.5.2",
    "sphinx-autoapi==2.1.0",   # Defining exact versions to ensure packages don't break
    "astroid==2.15.5",
    "numpydoc==1.5.0",
    "sphinxcontrib-collections @ git+https://github.com/anugrahjo/sphinx-collections.git",
    "sphinxcontrib-bibtex==2.5.0"
]
test = [
    "pytest",
    "pytest-cov",
]
jax = [
    "jax[cpu]",
]
openmdao = [
    "openmdao",
]
csdl = [
    "csdl @ git+https://github.com/LSDOlab/csdl.git",
    "python_csdl_backend @ git+https://github.com/LSDOlab/python_csdl_backend.git",
]
csdl_alpha = [
    "csdl_alpha @ git+https://github.com/LSDOlab/csdl_alpha.git",
]
qpsolvers = [
    "qpsolvers",
    # "qpsolvers[wheels_only]", # Installs the library with open source QP solvers with pre-complied binaries
    "quadprog",               # quadprog and osqp MAY BE installed with qpsolvers[open_source_solvers]
    "highspy",                   # but not with qpsolvers[wheels_only]
    "osqp",                   # but not with qpsolvers[wheels_only]
]
cvxopt = [    # cvxopt is already installed with qpsolvers[open_source_solvers] or qpsolvers[wheels_only]
    "cvxopt",
]
sqp = [
    "osqp", # osqp is already installed with qpsolvers[open_source_solvers]
]
opensqp = [
    "qpsolvers",
    "quadprog",
    "highspy",
]
cobyqa = [
    "cobyqa", # cobyqa is already installed with scipy>=1.14.0, which requires python>=3.10
]
pycutest = [
    "pycutest", # Needs manual installation of the CUTEst library with the test problems
]
pyslsqp = [
    "pyslsqp",
]
ipopt = [
    "casadi", # modOpt uses the IPOPT solver from CasADi
]
casadi = [
    "casadi", # modOpt uses the IPOPT solver from CasADi
]
interfaces = [
    "csdl @ git+https://github.com/LSDOlab/csdl.git", # csdl is deprecated with dependencies fixed in the main package
    "python_csdl_backend @ git+https://github.com/LSDOlab/python_csdl_backend.git",
    "csdl_alpha @ git+https://github.com/LSDOlab/csdl_alpha.git",
    "jax[cpu]",
    "openmdao",
    "qpsolvers",
    # "qpsolvers[open_source_solvers]", # Installs the library with open source QP solvers
    "cvxopt", # cvxopt MAY BE already installed with qpsolvers[open_source_solvers]
    "pycutest", # Needs manual installation of the CUTEst library with the test problems
    "casadi", # Needed for the IPOPT interface
    "pyslsqp",
    "osqp", # osqp MAY BE already installed with qpsolvers[open_source_solvers]
    "quadprog", # quadprog MAY BE already installed with qpsolvers[open_source_solvers]
    "cobyqa", # cobyqa is already installed with scipy>=1.14.0, which requires python>=3.10
]
open_source_optimizers = [
    "qpsolvers",
    "cvxopt", # cvxopt MAY BE already installed with qpsolvers[open_source_solvers]
    "casadi", # Needed for the IPOPT interface
    "pyslsqp",
    "osqp", # osqp MAY BE already installed with qpsolvers[open_source_solvers]
    "quadprog", # quadprog MAY BE already installed with qpsolvers[open_source_solvers]
    "cobyqa", # cobyqa is already installed with scipy>=1.14.0, which requires python>=3.10
]
visualization = [
    "matplotlib",
]

[tool.pytest.ini_options]
markers = [
    "basic: marks basic tests as those that are not marked as interfaces or visualization",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "interfaces: marks tests as interfaces (deselect with '-m \"not interfaces\"')",
    "recording: marks tests as recording (deselect with '-m \"not recording\"')",
    "visualization: marks tests as visualization (deselect with '-m \"not visualization\"')",
    "benchmarking: marks tests as benchmarking (deselect with '-m \"not benchmarking\"')",
    "casadi: marks tests as casadi (deselect with '-m \"not casadi\"')",
    "csdl: marks tests as csdl (deselect with '-m \"not csdl\"')",
    "csdl_alpha: marks tests as csdl_alpha (deselect with '-m \"not csdl_alpha\"')",
    "openmdao: marks tests as openmdao (deselect with '-m \"not openmdao\"')",
    "jax: marks tests as jax (deselect with '-m \"not jax\"')",
    "snopt: marks tests as snopt (deselect with '-m \"not snopt\"')",
    "slsqp: marks tests as slsqp (deselect with '-m \"not slsqp\"')",
    "opensqp: marks tests as opensqp (deselect with '-m \"not opensqp\"')",
    "cobyla: marks tests as cobyla (deselect with '-m \"not cobyla\"')",
    "bfgs: marks tests as bfgs (deselect with '-m \"not bfgs\"')",
    "lbfgsb: marks tests as lbfgsb (deselect with '-m \"not lbfgsb\"')",
    "trust_constr: marks tests as trust_constr (deselect with '-m \"not trust_constr\"')",
    "nelder_mead: marks tests as nelder_mead (deselect with '-m \"not nelder_mead\"')",
    "cobyqa: marks tests as cobyqa (deselect with '-m \"not cobyqa\"')",
    "pyslsqp: marks tests as pyslsqp (deselect with '-m \"not pyslsqp\"')",
    "ipopt: marks tests as ipopt (deselect with '-m \"not ipopt\"')",
    "qpsolvers: marks tests as qpsolvers (deselect with '-m \"not qpsolvers\"')",
    "cvxopt: marks tests as cvxopt (deselect with '-m \"not cvxopt\"')",
    "pycutest: marks tests as pycutest (deselect with '-m \"not pycutest\"')",
]

[tool.coverage.run]
omit = [
    # omit anything in a tests directory anywhere
    "*/tests/*",
    # omit everything in the docs directory
    "/docs/*",
    # omit this single file since visualization is not tested on the cloud
    "modopt/core/visualization.py",
    # omit this single file since snopta is deprecated and not used anymore
    "modopt/external_libraries/snopt/snopta.py",
    # omit this since scipy_optimizer is deprecated and not used anymore
    "modopt/external_libraries/scipy/scipy_optimizer.py",
    # omit any development files
    "*/*_dev.py",
    # omit this single file since options dictionary is already tested in openmdao
    "modopt/utils/options_dictionary.py",
    "modopt/utils/generate_options_table.py", # only used when building docs
    # omit deprecated sqp algorithms
    "modopt/core/optimization_algorithms/sqp.py",
    "modopt/core/optimization_algorithms/sqp_osqp.py",
    # omit deprecated qp solver
    "modopt/core/qp_solver.py",
    # omit surf sqp algorithms
    "modopt/core/optimization_algorithms/sqp_surf.py",
    "modopt/core/optimization_algorithms/sqp_surf_dense.py",
    # omit snopt interface as it's licensed and cannot be put on cloud
    "modopt/external_libraries/snopt/*",

    # Only for local testing
    # "modopt/core/optimization_algorithms/interior_point.py",
    ]