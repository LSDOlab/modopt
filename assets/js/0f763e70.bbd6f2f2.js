"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[602],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return n?r.createElement(h,a(a({ref:t},m),{},{components:n})):r.createElement(h,a({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9158:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={title:"Using available optimizers",sidebar_position:8},s="Using available optimizers",p={unversionedId:"using_available_optimizers",id:"using_available_optimizers",isDocsHomePage:!1,title:"Using available optimizers",description:"Standard optimization algorithms implemented",source:"@site/docs/using_available_optimizers.mdx",sourceDirName:".",slug:"/using_available_optimizers",permalink:"/modopt/docs/using_available_optimizers",editUrl:"https://github.com/lsdolab/modopt/edit/main/website/docs/using_available_optimizers.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Using available optimizers",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Benchmarking",permalink:"/modopt/docs/benchmarking"},next:{title:"Building Custom Optimizers",permalink:"/modopt/docs/building_custom_optimizer"}},m=[{value:"Standard optimization algorithms implemented",id:"standard-optimization-algorithms-implemented",children:[{value:"1. Steepest-Descent",id:"1-steepest-descent",children:[]},{value:"2. Newton",id:"2-newton",children:[]},{value:"3. Quasi-Newton",id:"3-quasi-newton",children:[]}]},{value:"Usage instructions",id:"usage-instructions",children:[]},{value:"External Libraries",id:"external-libraries",children:[{value:"1 . Scipy library",id:"1--scipy-library",children:[]},{value:"2. SNOPT library",id:"2-snopt-library",children:[]}]}],c={toc:m};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-available-optimizers"},"Using available optimizers"),(0,o.kt)("h2",{id:"standard-optimization-algorithms-implemented"},"Standard optimization algorithms implemented"),(0,o.kt)("p",null,"Currently, modOpt has a fully transparent library of optimization algorithms\nimplemented for unconstrained problems.\nThe following are the algorithms implemented:"),(0,o.kt)("h3",{id:"1-steepest-descent"},"1. Steepest-Descent"),(0,o.kt)("p",null,"The implementation can be found\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/LSDOlab/modopt/blob/main/modopt/core/optimization_algorithms/steepest_descent.py"},"here")),"."),(0,o.kt)("h3",{id:"2-newton"},"2. Newton"),(0,o.kt)("p",null,"The implementation can be found\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/LSDOlab/modopt/blob/main/modopt/core/optimization_algorithms/newton.py"},"here")),"."),(0,o.kt)("h3",{id:"3-quasi-newton"},"3. Quasi-Newton"),(0,o.kt)("p",null,"The implementation can be found\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/LSDOlab/modopt/blob/main/modopt/core/optimization_algorithms/quasi_newton.py"},"here")),"."),(0,o.kt)("h2",{id:"usage-instructions"},"Usage instructions"),(0,o.kt)("p",null,"In order to use these algorithms with any of the unconstrained problems written using\nthe ",(0,o.kt)("strong",{parentName:"p"},"Problem()")," class, you should first import your problem from the coresponding file\nand also import the optimizer of your choice from the library.\nAfter that, set tolerances and other parameters for the chosen optimizer.\nSolve the problem and then print results."),(0,o.kt)("p",null,"An example is shown below for the Newton optimizer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"\nfrom my_problem import MyProblem\n\nfrom modopt.optimization_algorithms import Newton # can be SteepestDescent, or QuasiNewton\n\ntol = 1E-8\nmax_itr = 500\n\nprob = MyProblem()\n\noptimizer = SteepestDescent(\n    prob,\n    opt_tol=tol,\n    max_itr=max_itr,\n    )\n\noptimizer.check_first_derivatives(prob.x.get_data())\noptimizer.solve()\noptimizer.print_results(summary_table=True)\n")),(0,o.kt)("h2",{id:"external-libraries"},"External Libraries"),(0,o.kt)("h3",{id:"1--scipy-library"},"1 . Scipy library"),(0,o.kt)("p",null,"While using scipy library you can follow the same process as in the previous section\nexcept when importing the optimizer."),(0,o.kt)("p",null,"You need to import the optimizer as shown in the following code\n(here we use the SLSQP optimizer):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from modopt.scipy_library import SLSQP\n")),(0,o.kt)("h3",{id:"2-snopt-library"},"2. SNOPT library"),(0,o.kt)("p",null,"All libraries containing only a single optimizer is located in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"external_libraries")," module.\nWhile using any external library you can follow the\nsame process as in the first section except when importing the optimizer."),(0,o.kt)("p",null,"You need to import the optimizer as shown in the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from modopt.external_libraries import SNOPT\n")))}u.isMDXComponent=!0}}]);